#!/bin/perl

#=========================================================================================
#
# score.pl
#
# This routine calculates score matrices from rate matrices.
# A score matrix is typically defined by:
#
# score(t)_ij = factor *log{ [diag(f)*e^(t*Q)]_ij/f_i f_j}
#
# with the following variables:
# f        amino acid composition
# t        pam distance
# factor   typically 3/log(2) (third bits)
# Q        amino acid substitution rate matrix
#
# There are several methods known how such rate matrices could be derived.
# In this script there are several rate matrices  implemented:
#___________________________________________________________________________________________
# 1. VT MODEL
#
# Modeling Amino Acid Replacement
#   T. Mueller and M. Vingron
#   Journal of Computational Biology, 7(6):761-776, 2000.
#___________________________________________________________________________________________
# 2. VTML MODEL
#
# Estimating Amino Acid Substitution Models:
# A Comparison of Dayhoff's Estimator, the Resolvent Approach and a Maximum Likelihood Method.
#    T. Mueller, R. Spang and M. Vingron
#    Mol. Biol. Evol. 19(1): 8-13. 2002
#
#___________________________________________________________________________________________
# 3. SLIM MODEL
#
# Non-symmetric Score Matrices and the Detection of Homologous Transmembrane Proteins
# Tobias Mueller, Sven Rahmann and Marc Rehmsmeier
# In: Soeren Brunak et al. (eds)
# Proceedings of the 9th International Conference on Intelligent Systems for Molecular Biology (ISMB 2001)
# Bioinformatics 17 Supplement 1, pp. S182-189. \n");}
#___________________________________________________________________________________________
#
#
# For comments and questions please contact Tobias Mueller
# email: Tobias.Mueller@biozentrum.uni-wuerzburg.de
# WWW:   http://www.molgen.mpg.de/~muelle_t
#
# Date 27.02.2003
#=========================================================================================

# Set defaults
#-------------------------------------

$default_family   = "vt";
$default_pam      = 160;
$default_factor   = 3;
$default_k        = 26;

$USAGE = "\n\nUSAGE: $0 <score family> <pam distance> <file name> <units in bits>\n
                                         Defaults
valid score families:   VT VTML SLIM     VT
valid pam distances in: [1 500]          160
valid units in:         [1 1000]         3  \n\n";

# Eingabe parsen
#-------------------------------------

if (!defined $ARGV[0])
  {
    $family=$default_family;
  }
elsif (lc($ARGV[0]) eq "-h")
  {
    die "$USAGE\n";
  }
else
  {
    $family=lc($ARGV[0]);
  }
if (defined  $ARGV[1])
  {
    $pam=$ARGV[1];
  }
else
  { 
    $pam=$default_pam;
}
if (!defined $ARGV[2])
  {
#    $fname=sprintf("%s%d.bla",uc($family),$pam);
    $fname="STDOUT";
  }
else
  {
    $fname=$ARGV[2];
  }

if (!defined  $ARGV[3])
 {
   $factor = $default_factor;
 }
else
  {
    $factor=$ARGV[3];
  }
if (!defined  $ARGV[4])
  {
    $k=$default_k;
  }
else
  {
    $k     =$ARGV[4];
  }

# Check score family
#-------------------------------------
if ($family ne "vt" and $family ne "vtml" and $family ne "slim") 
{
  die "Unknown family!\n\n $USAGE";
}

# PAM Distance
#-------------------------------------
if ($pam =~ /[^0-9]/ or $pam<1 or $pam>500) 
  {
    die "Wrong PAM distance! $USAGE";
  }

# Scorefactor
#-------------------------------------
if ($factor  =~ /[^0-9]/ or $factor <1 or $factor>1000)
  {
    die "Wrong scaling factor! $USAGE";
  }

# Chek k of approximation von P=e^qt
#-------------------------------------
if ($k =~ /[^0-9]/ or $k<1)
  {
    die "$USAGE";
  }

# scorefactor berechnen
#-------------------------------------
if ($factor == 10)
  { $ustring="Tenth-Dits"; $rfactor= 10/log(10);}
elsif ($factor == 1)
  {$ustring="Bits";  $rfactor=$factor/log(2);}
elsif ($factor == 2)
  {$ustring="Half-Bits";  $rfactor=$factor/log(2);}
elsif ($factor == 3)
  {$ustring="Third-Bits";  $rfactor=$factor/log(2);}
else
  {$ustring="1/$factor-Bits";  $rfactor=$factor/log(2);}


$entropyfactor = (1/log(2))/$rfactor;  # -> BITS


#--------------------------------------------------------------------------------
# Calculating score matrix
#--------------------------------------------------------------------------------

# printf("\n ... Calculating score matrix %s%d ....\n\n",uc($family),$pam);
# Einheitsmatrix laden
einheitsmatrix_laden();
menge_aminos();

# Load Rate Matrix Q, Stationary Distribution tau_q, and Transition Matrix P
@Q     = matrix_laden($family);
@tau_q = verteilung_laden($family);
@P     = uebergangsmatrix(\@Q,$pam,$k);

if ($family eq "slim")
  {
  @tau   = verteilung_laden("vtml");
  @SLIM  = scorematrix(\@P,\@tau_q,\@tau,$rfactor);
  @back  = calc_back(\@tau_q,\@tau);
}else  {
  @SLIM  = scorematrix(\@P,\@tau_q,\@tau_q,$rfactor);
  @back  = calc_back(\@tau_q,\@tau_q);
}

@blast   = score2blast(\@SLIM);
$mini    = min_diag_score(\@SLIM);
$tr      = calc_trace(\@SLIM);
$maxs    = max_scorematrix(\@SLIM);
$mins    = min_scorematrix(\@SLIM);
@target  = calc_target(\@P,\@tau_q);
$H       = calc_entropy(\@factor,\@target,\@SLIM);
$E       = calc_expectation(\@back,\@SLIM);
matrix_ausgeben(@blast);

#--------------------------------------------------------------------------------
# End of MAIN
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Subroutinen 
#--------------------------------------------------------------------------------

sub max_scorematrix
{
	my ($i,$j,$mx);
	@score=@{$_[0]};

	$n_row = anzahl_zeilen(@score);
	$n_col = anzahl_spalten(@score);

	$mx=$score[0][0];
	for ($i=0; $i<$n_row; $i++){
	    for ($j=0; $j<$n_col; $j++) {
		if ($score[$i][$j]>$mx){
		    $mx=$score[$i][$j];
		}
	    }
	}
	return $mx;
}
sub min_scorematrix
{
	my ($i,$j,$mx);
	@score=@{$_[0]};

	$n_row = anzahl_zeilen(@score);
	$n_col = anzahl_spalten(@score);
	$mx=$score[0][0];
	for ($i=0; $i<$n_row; $i++){
	    for ($j=0; $j<$n_col; $j++){
		if ($score[$i][$j]<$mx){
		    $mx=$score[$i][$j];}}}
	return $mx;
}
sub calc_back
{
	my (@tau, @pi);
	my ($i, $j, $n_row, $n_col, @back);
	
	@tau=@{$_[0]};
	@pi=@{$_[1]};

	$n_row = anzahl_zeilen(@tau);
	$n_col = anzahl_zeilen(@pi);
	for ($i=0; $i<$n_row; $i++) {
	  for ($j=0; $j<$n_col; $j++) {
	    $back[$i][$j]=$tau[$i]*$pi[$j];}}
	return @back;
}

sub calc_entropy
{
	my (@faktor,@target,@score);
	my ($i, $j, $n_row, $n_col, $sum);
	
	@faktor = @{$_[0]};
	@target = @{$_[1]};
	@score  = @{$_[2]};

	$n_row = anzahl_zeilen(@score);
	$n_col = anzahl_spalten(@score);

	$sum=0;
	for ($i=0; $i<$n_row; $i++) {
		for ($j=0; $j<$n_col; $j++) {
		  $sum=$sum+$target[$i][$j]*$score[$i][$j];}}
	$sum = $sum*$entropyfactor;
	return $sum;
}

sub calc_expectation
{
	my (@back,@score);
	my ($i, $j, $sum);
	
	@back   = @{$_[0]};
	@score  = @{$_[1]};

	$n_row = anzahl_zeilen(@score);
	$n_col = anzahl_spalten(@score);
	$sum=0;
	for ($i=0; $i<$n_row; $i++) {
		for ($j=0; $j<$n_col; $j++) {
			$sum=$sum+$back[$i][$j]*$score[$i][$j];}}
	return $sum;
}


sub calc_trace
{
	my (@score);
	my ($i, $sum);
	
	@score  = @{$_[0]};

	$sum=0;
	$n_row = anzahl_zeilen(@score);
	for ($i=0; $i<$n_row; $i++) 
	  { $sum=$sum+$score[$i][$i];}
	return $sum;
}

sub min_diag_score
{
	my (@score);
	my ($i, $min_score);
	
	@score  = @{$_[0]};

	$n_row = anzahl_spalten(@score);
#	$min_score=$score[0][0];
	$min_score=7;

	for ($i=0; $i<$n_row; $i++)
	  {
	    if ($score[$i][$i]<$min_score)
	      { $min_score=$score[$i][$i];}
	  }
	return $min_score;
}


sub calc_target
{
	my (@P, @tau,@target);
	my ($i, $j, $n_row, $n_col);
	
	@P=@{$_[0]};
	@tau=@{$_[1]};

	$n_row = anzahl_zeilen(@P);
	$n_col = anzahl_spalten(@P);

	for ($i=0; $i<$n_row; $i++) {
		for ($j=0; $j<$n_col; $j++) {
                  $target[$i][$j]=$tau[$i]*$P[$i][$j];}}
	return @target;
}

# subroutine runden: erwartet als Übergabe eine Zahl und die Anzahl der Stellen,
# auf die gerundet werden soll
sub runden
{
	my $zahl=$_[0];
	my $anzahl_stellen=$_[1];
	# my $round=int(10**$anzahl_stellen*$zahl)/10**$anzahl_stellen;
	$round=10**$anzahl_stellen*$zahl;
	if ($round>0) {
		$round=int($round+0.5);
	}
	else {
		$round=int($round-0.5);
	}
	$round=$round/10**$anzahl_stellen;
	return ($round);
}

# erzeuge Vektor, der die 20 Aminosäuren enthält
sub menge_aminos
{
	my $file;
	$file="A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V";
	@menge_aminos=split(" ",$file);
}

# subroutine: erwartet als Übergabe einen Dateinamen. Die Textdatei muß Wertepaare der Form (wert1	wert2 br) enthalten.
# Die Datei wird geöffnet und die Wertepaare in den Hash %file geschrieben
sub verteilung_laden
{

	my $file;
	if (@_[0] eq "vtml") {
		# pi_vtml
		$file="   7.7658563e-02   5.2572142e-02   4.3863989e-02   5.2726419e-02   1.6118335e-02   3.6772166e-02   6.3084900e-02   7.1810027e-02   2.3835137e-02   6.0627026e-02   9.0620085e-02   6.0112787e-02   2.3319343e-02   4.1718456e-02   4.5599877e-02   6.3939588e-02   5.7019397e-02   1.3431033e-02   3.3938640e-02   7.1232088e-02";
	}
	if (@_[0] eq "vt") {
		# pi_vt
		$file="   7.7076463e-02   5.0081937e-02   4.6237740e-02   5.3792986e-02   1.4453339e-02   4.0892361e-02   6.3357935e-02   6.5567235e-02   2.1880269e-02   5.9196969e-02   9.7646129e-02   5.9207941e-02   2.2069588e-02   4.1350852e-02   4.7687160e-02   7.0729517e-02   5.6775916e-02   1.2701980e-02   3.2374605e-02   6.6919080e-02";
              }
	if (@_[0] eq "slim") {
          # pi_slim
          $file="8.8135254101640650e-02   2.1308523409363740e-02   2.2308923569427767e-02   1.4105642256902761e-02   2.6410564225690266e-02   1.2204881952781112e-02   1.0204081632653060e-02   5.7523009203681467e-02   1.0904361744697876e-02   1.1314525810324125e-01   1.5766306522609039e-01   8.8035214085634209e-03   4.1116446578631442e-02   8.9735894357743068e-02   3.2312925170068021e-02   6.5426170468187259e-02   5.3221288515406147e-02   1.8707482993197275e-02   4.7018807523009194e-02   1.0974389755902358e-01";
        }

	# in Wertepaare zerlegen
	@verteilung=split(" ",$file);
	return (@verteilung);
}



# Subroutine: Matrix erstellen und zurückgeben
sub matrix_laden
{
	my @file;
	my @matrix;
	my $datei;
	if (@_[0] eq "vtml") {
	# Q_vtml
	@file[0]=" -1.0328173e-002  2.8123469e-004  2.6964619e-004  3.6478666e-004  3.2084602e-004  3.5471795e-004  6.4006159e-004  1.0337579e-003  1.1514445e-004  2.4063992e-004  4.5161803e-004  4.6364039e-004  2.1374202e-004  1.4753508e-004  5.4552959e-004  2.0778599e-003  1.1338783e-003  2.6116852e-005  1.0589262e-004  1.5415252e-003";
	@file[1]="  4.1543451e-004 -8.6250911e-003  4.0999444e-004  2.2204460e-016  7.0975251e-005  1.0423812e-003  2.2204460e-016  3.0577920e-004  4.4930890e-004  1.6340696e-004  3.0725122e-004  3.8220242e-003  1.4858237e-004  6.0187904e-005  2.4180119e-004  4.8149089e-004  3.3649331e-004  4.6690951e-005  1.5643679e-004  1.6685180e-004";
	@file[2]="  4.7739241e-004  4.9138910e-004 -1.0649711e-002  2.0994829e-003  5.7718884e-005  5.9584618e-004  5.6856975e-004  7.8865328e-004  5.7445421e-004  1.4861486e-004  1.7103643e-004  1.1019951e-003  1.1774827e-004  4.9259697e-005  1.4696965e-004  1.8894529e-003  9.5671470e-004  1.7817542e-005  2.6490607e-004  1.3168943e-004";
	@file[3]="  5.3727919e-004  2.2204460e-016  1.7465949e-003 -8.5904879e-003  2.2204460e-016  4.1704858e-004  2.8826390e-003  5.4649315e-004  2.7865542e-004  2.7153340e-005  2.2204460e-016  5.3341690e-004  4.9921700e-005  2.2204460e-016  3.0329459e-004  6.7788466e-004  4.2609517e-004  1.8355448e-005  2.2204460e-016  1.4565578e-004";
	@file[4]="  1.5458446e-003  2.3149543e-004  1.5707457e-004  2.2204460e-016 -6.6499935e-003  2.2204460e-016  2.2204460e-016  2.8621945e-004  1.3557797e-004  5.1164679e-004  2.2204460e-016  2.2204460e-016  2.9583935e-004  2.2204460e-016  9.7605914e-005  1.2287312e-003  5.0993956e-004  2.2204460e-016  4.0062233e-004  1.2493964e-003";
	@file[5]="  7.4912329e-004  1.4902634e-003  7.1076014e-004  5.9799247e-004  2.2204460e-016 -1.2891437e-002  2.8323396e-003  2.5000250e-004  8.4766522e-004  8.9431797e-005  6.1101695e-004  1.9055019e-003  3.3392879e-004  1.4317080e-004  4.5007012e-004  8.9682886e-004  6.1760823e-004  2.2204460e-016  2.2204460e-016  3.6573269e-004";
	@file[6]="  7.8792648e-004  2.2204460e-016  3.9533608e-004  2.4093124e-003  2.2204460e-016  1.6509698e-003 -9.7817513e-003  4.0180240e-004  1.7751075e-004  8.5153670e-005  2.4967109e-004  1.6231113e-003  5.9235232e-005  2.2204460e-016  2.9931475e-004  7.2706083e-004  4.4543978e-004  2.2204460e-016  1.7710577e-004  2.9280102e-004";
	@file[7]="  1.1179519e-003  2.2386104e-004  4.8173604e-004  4.0126189e-004  6.4244245e-005  1.2802019e-004  3.5298224e-004 -4.6082012e-003  1.0271842e-004  2.2204460e-016  9.0543401e-005  2.6240222e-004  3.8773674e-005  5.0322478e-005  1.4812417e-004  7.9096125e-004  1.7133189e-004  3.1236599e-005  4.2779117e-005  1.0895040e-004";
	@file[8]="  3.7515841e-004  9.9102141e-004  1.0571725e-003  6.1642198e-004  9.1683597e-005  1.3077536e-003  4.6982099e-004  3.0946802e-004 -9.8531489e-003  1.3050325e-004  4.6104724e-004  5.7317612e-004  2.2204460e-016  4.2834956e-004  2.7370212e-004  7.2583614e-004  4.6743014e-004  8.6545839e-005  1.2535912e-003  2.3446673e-004";
	@file[9]="  3.0824124e-004  1.4169677e-004  1.0752367e-004  2.3614854e-005  1.3602670e-004  5.4243150e-005  8.8605876e-005  2.2204460e-016  5.1306539e-005 -1.1913176e-002  3.0905426e-003  1.4673598e-004  7.8843834e-004  4.3565715e-004  4.7313368e-005  1.0956098e-004  6.1088792e-004  8.6189662e-005  1.2132213e-004  5.5652691e-003";
	@file[10]="  3.8702245e-004  1.7824806e-004  8.2788931e-005  2.2204460e-016  2.2204460e-016  2.4794080e-004  1.7380778e-004  7.1749260e-005  1.2126588e-004  2.0676477e-003 -7.8755516e-003  2.0647049e-004  1.2548095e-003  8.6251698e-004  1.9394494e-004  2.0369482e-004  2.4256747e-004  8.9654778e-005  2.1450523e-004  1.2769166e-003";
	@file[11]="  5.9896818e-004  3.3425833e-003  8.0412009e-004  4.6787322e-004  2.2204460e-016  1.1656327e-003  1.7033616e-003  3.1346260e-004  2.2726831e-004  1.4799125e-004  3.1125447e-004 -1.1378859e-002  2.1454131e-004  2.2204460e-016  3.4520644e-004  6.4109805e-004  6.8279647e-004  3.6965070e-005  1.1709468e-004  2.5864164e-004";
	@file[12]="  7.1180815e-004  3.3497056e-004  2.2148603e-004  1.1287593e-004  2.0448423e-004  5.2657079e-004  1.6024674e-004  1.1940039e-004  2.2204460e-016  2.0498293e-003  4.8762498e-003  5.5304628e-004 -1.3085382e-002  9.8064051e-004  5.7757302e-005  1.6911439e-004  8.0518634e-004  2.2204460e-016  2.2204460e-016  1.2017151e-003";
	@file[13]="  2.7463534e-004  7.5846698e-005  5.1793068e-005  2.2204460e-016  2.2204460e-016  1.2619596e-004  2.2204460e-016  8.6620142e-005  2.4473031e-004  6.3311543e-004  1.8735440e-003  2.2204460e-016  5.4814811e-004 -7.5724260e-003  1.1451197e-004  3.4893826e-004  1.8901678e-004  2.8101991e-004  2.2548908e-003  4.6941924e-004";
	@file[14]="  9.2906049e-004  2.7877283e-004  1.4137483e-004  3.5069475e-004  3.4501076e-005  3.6294074e-004  4.1408535e-004  2.3326381e-004  1.4306459e-004  6.2905188e-005  3.8542445e-004  4.5507406e-004  2.9536534e-005  1.0476481e-004 -5.4928207e-003  8.7587638e-004  3.7928960e-004  3.1975236e-005  2.2204460e-016  2.8021595e-004";
	@file[15]="  2.5236887e-003  3.9588943e-004  1.2962070e-003  5.5900314e-004  3.0974709e-004  5.1577342e-004  7.1734212e-004  8.8832209e-004  2.7057422e-004  1.0388488e-004  2.8869191e-004  6.0272817e-004  6.1677540e-005  2.2767061e-004  6.2464987e-004 -1.2451174e-002  2.5952508e-003  4.9209152e-005  2.3453687e-004  1.8632687e-004";
	@file[16]="  1.5443054e-003  3.1024835e-004  7.3598327e-004  3.9401456e-004  1.4415054e-004  3.9829941e-004  4.9282394e-004  2.1577477e-004  1.9539423e-004  6.4953892e-004  3.8550889e-004  7.1983922e-004  3.2929875e-004  1.3829483e-004  3.0332764e-004  2.9102248e-003 -1.1088255e-002  2.2204460e-016  1.1826831e-004  1.1029590e-003";
	@file[17]="  1.5100828e-004  1.8275909e-004  5.8189755e-005  7.2058277e-005  2.2204460e-016  2.2204460e-016  2.2204460e-016  1.6700883e-004  1.5358700e-004  3.8905594e-004  6.0490686e-004  1.6544323e-004  2.2204460e-016  8.7288274e-004  1.0855955e-004  2.3426441e-004  2.2204460e-016 -4.1569708e-003  9.9724686e-004  2.2204460e-016";
	@file[18]="  2.4230402e-004  2.4232606e-004  3.4237779e-004  2.2204460e-016  1.9026587e-004  2.2204460e-016  3.2920292e-004  9.0515397e-005  8.8039821e-004  2.1672642e-004  5.7275370e-004  2.0740041e-004  2.2204460e-016  2.7717834e-003  2.2204460e-016  4.4186186e-004  1.9869941e-004  3.9465502e-004 -7.3854789e-003  2.6420844e-004";
	@file[19]="  1.6805998e-003  1.2314333e-004  8.1092999e-005  1.0781528e-004  2.8271233e-004  1.8880232e-004  2.5931183e-004  1.0983437e-004  7.8455467e-005  4.7367096e-003  1.6244686e-003  2.1826778e-004  3.9340706e-004  2.7492449e-004  1.7938282e-004  1.6725136e-004  8.8288946e-004  2.2204460e-016  1.2588253e-004 -1.1514951e-002";
	}
	
	if (@_[0] eq "vt") {
	# Q_vt	
	@file[0]="  -1.1411028e-02   3.1690849e-04   2.9013185e-04   3.7559234e-04   1.8174787e-04   4.6178663e-04   7.5261309e-04   1.1149029e-03   1.0736606e-04   2.7734892e-04   5.4006580e-04   4.5046348e-04   2.1266883e-04   1.4604906e-04   6.6618241e-04   2.3011367e-03   1.5203925e-03   3.5828436e-05   9.0782088e-05   1.5690613e-03";
	@file[1]="   4.8515338e-04  -9.4310795e-03   3.7157420e-04   2.0862332e-04   1.0698086e-04   1.1457039e-03   4.3513405e-04   4.3792289e-04   5.4580859e-04   1.3386759e-04   4.1678950e-04   3.0053505e-03   1.3873245e-04   8.9463876e-05   3.1842073e-04   6.9178341e-04   3.8597097e-04   9.7296830e-05   1.4808794e-04   2.6841445e-04";
	@file[2]="   4.7133402e-04   3.9815154e-04  -1.1726112e-02   2.1483740e-03   7.0898738e-05   6.2388333e-04   6.4327205e-04   8.0278519e-04   6.9453676e-04   2.7580234e-04   2.0203855e-04   1.3322474e-03   1.0330597e-04   1.0495604e-04   1.6829203e-04   2.2168092e-03   1.1232738e-03   1.1705931e-05   1.7992664e-04   1.5451808e-04";
	@file[3]="   5.4026550e-04   1.9030448e-04   1.8482646e-03  -9.4852140e-03   1.6121436e-05   3.4126882e-04   3.1283569e-03   6.4080303e-04   2.3959964e-04   6.5748579e-05   1.7748815e-04   4.3565237e-04   4.4435446e-05   3.4406955e-05   2.5650008e-04   7.9593887e-04   4.3488289e-04   1.6205275e-05   1.2191013e-04   1.5706075e-04";
	@file[4]="   9.6915446e-04   3.6338430e-04   2.3324679e-04   6.4306296e-05  -7.1248064e-03   9.6669423e-05   1.5314963e-04   3.6723966e-04   1.6753784e-04   2.8723233e-04   7.0770531e-04   1.0405299e-04   1.3671763e-04   3.5325069e-04   1.0478952e-04   1.2909862e-03   5.0895544e-04   1.0361573e-04   3.4721745e-04   7.6559465e-04";
	@file[5]="   8.6606635e-04   1.4039880e-03   7.1184667e-04   4.5705561e-04   3.3255947e-05  -1.2203904e-02   2.1800277e-03   2.9299738e-04   8.8586834e-04   1.5295037e-04   6.6006051e-04   1.8222396e-03   2.1344208e-04   7.5142567e-05   5.5952649e-04   8.3535948e-04   6.2439829e-04   5.8321649e-05   1.5335622e-04   2.1800027e-04";
	@file[6]="   9.1689095e-04   3.4572356e-04   4.7530871e-04   2.6435549e-03   3.1482952e-05   1.4257760e-03  -1.0221110e-02   4.6196480e-04   1.8186272e-04   1.2312026e-04   2.7838809e-04   1.3028962e-03   8.2632147e-05   4.7231590e-05   3.6310249e-04   6.5812121e-04   4.5850011e-04   2.7102651e-05   9.4673080e-05   3.0277800e-04";
	@file[7]="   1.3061551e-03   3.3375765e-04   5.6785003e-04   5.2136252e-04   8.1226747e-05   1.8220058e-04   4.4657482e-04  -6.0392495e-03   9.5333435e-05   9.0083396e-05   1.7968531e-04   2.7063990e-04   6.6044973e-05   7.7277925e-05   1.8681855e-04   1.0999271e-03   2.0786522e-04   6.0238783e-05   5.5960607e-05   2.1024679e-04";
	@file[8]="   3.7545458e-04   1.2582925e-03   1.4462256e-03   5.8480694e-04   1.1268229e-04   1.6686434e-03   5.2742624e-04   2.8513421e-04  -1.1074327e-02   1.7795292e-04   5.3479989e-04   5.4264283e-04   1.5322229e-04   2.8807895e-04   4.4767125e-04   7.0764859e-04   4.6757253e-04   4.1052918e-05   1.2719774e-03   1.8304165e-04";
	@file[9]="   3.3708652e-04   1.0690461e-04   2.1617044e-04   5.8498739e-05   6.4008045e-05   9.7381506e-05   1.2822283e-04   9.2782545e-05   6.3004980e-05  -1.1933615e-02   2.9746570e-03   1.8559743e-04   7.6681895e-04   4.7882056e-04   1.1253651e-04   2.1606170e-04   7.6813720e-04   3.5385501e-05   1.3969211e-04   5.0918473e-03";
	@file[10]="   4.1849541e-04   2.1334500e-04   9.7025736e-05   9.7735423e-05   1.0220511e-04   2.7738163e-04   1.8085194e-04   1.1794951e-04   1.1968124e-04   1.8095751e-03  -7.7950168e-03   1.6772097e-04   9.0331644e-04   9.1848270e-04   2.4874759e-04   3.2551321e-04   2.9282907e-04   9.8179482e-05   2.0430110e-04   1.2016803e-03";
	@file[11]="   5.8392973e-04   2.5594471e-03   1.0300280e-03   3.9854915e-04   2.4145555e-05   1.2580055e-03   1.3948555e-03   2.9672954e-04   2.0185458e-04   1.9032080e-04   2.8364564e-04  -1.0705235e-02   1.9196038e-04   8.2046736e-05   3.3396747e-04   7.1072265e-04   7.3293322e-04   3.7994193e-05   1.3008230e-04   2.6401692e-04";
	@file[12]="   7.4695104e-04   3.2119228e-04   2.2454052e-04   1.1461209e-04   8.9963267e-05   3.9900399e-04   2.4417605e-04   2.0081696e-04   1.5532179e-04   2.0123174e-03   3.9794234e-03   5.1634628e-04  -1.2629915e-02   4.9590302e-04   1.2031547e-04   3.8847933e-04   9.6921938e-04   9.6522863e-05   1.8190775e-04   1.3729018e-03";
	@file[13]="   2.6727787e-04   1.0681172e-04   1.1984499e-04   4.6871750e-05   1.2570651e-04   7.4283604e-05   7.6922727e-05   1.2374145e-04   1.5082430e-04   6.9087735e-04   2.1614810e-03   1.1796694e-04   2.5601803e-04  -7.5146356e-03   9.0231324e-05   4.0287852e-04   1.9927068e-04   2.1534349e-04   1.7084738e-03   5.7980949e-04";
	@file[14]="   1.0673233e-03   3.3232223e-04   1.7082816e-04   2.9675883e-04   3.1823736e-05   4.7739850e-04   4.9254580e-04   2.5952155e-04   2.0333378e-04   1.4993039e-04   4.9197306e-04   4.2337327e-04   5.5478483e-05   7.9307785e-05  -6.6735580e-03   1.2657325e-03   5.6199322e-04   2.8477195e-05   8.0421627e-05   2.0501465e-04";
	@file[15]="   2.5249187e-03   4.8812317e-04   1.4299581e-03   6.0693586e-04   2.7068680e-04   4.8149286e-04   5.8778867e-04   1.0231000e-03   2.1940381e-04   1.8320430e-04   4.3966992e-04   5.9575276e-04   1.1796059e-04   2.3032997e-04   8.6644039e-04  -1.3135752e-02   2.5542055e-03   4.3499655e-05   1.5660170e-04   3.1567974e-04";
	@file[16]="   2.0815748e-03   3.4009930e-04   9.1199691e-04   4.1213833e-04   1.2847834e-04   4.4749228e-04   5.0887725e-04   2.3650120e-04   1.7884214e-04   7.8496685e-04   5.0838853e-04   7.7179204e-04   3.7794714e-04   1.4427915e-04   4.7286045e-04   3.1818541e-03  -1.2822830e-02   2.9422169e-05   1.4161443e-04   1.1637050e-03";
	@file[17]="   2.1277266e-04   3.8894994e-04   4.2421934e-05   6.7936489e-05   1.2129952e-04   1.8478401e-04   1.3530304e-04   3.1243606e-04   6.9499070e-05   1.7246686e-04   7.5284909e-04   1.7522655e-04   1.6175407e-04   7.0542811e-04   1.0286795e-04   2.4621928e-04   1.2911224e-04  -4.9206227e-03   7.4845330e-04   1.9084255e-04";
	@file[18]="   2.0803073e-04   2.2481166e-04   2.5528818e-04   2.0482983e-04   1.6215334e-04   1.8817460e-04   1.8956899e-04   1.1165455e-04   8.6663198e-04   2.6387448e-04   6.2024109e-04   2.3385307e-04   1.2059541e-04   2.1845517e-03   1.1522980e-04   3.4453968e-04   2.4610391e-04   2.9246012e-04  -7.1715591e-03   3.3896594e-04";
	@file[19]="   1.8374874e-03   1.9671115e-04   1.0886470e-04   1.2507276e-04   1.6720854e-04   1.3154049e-04   2.8935373e-04   2.0693484e-04   5.8813907e-05   4.4486864e-03   1.7673446e-03   2.3608946e-04   4.5802956e-04   3.5822488e-04   1.4415477e-04   3.3561074e-04   9.8963626e-04   3.6869577e-05   1.6522412e-04  -1.2061858e-02";
	}

	if (@_[0] eq "slim") {
          # Q_slim	
          @file[0]=" -1.1239882086490540e-02   7.2106621214917130e-05   7.9397253316213572e-05   3.3626234160646385e-05   6.3337843097344766e-04   6.1641354700670868e-05   2.3242731587690898e-05   1.1564465572162005e-03   8.5970898441663465e-05   4.8955527711782361e-04   1.2370228251658655e-03   5.6937136197651356e-05   2.8210398523317013e-04   5.1506316441322843e-04   1.5397512328175759e-04   2.2620409385823398e-03   1.4120832463509014e-03   6.1968462818868950e-05   7.1770239043162989e-05   2.5515516066743254e-03";
          @file[1]="2.9824381826451117e-04  -3.7263677841134529e-03   1.9352757665256276e-04   1.2348361953327984e-05   6.0852999231741552e-05   2.7337183977205616e-04   3.0750496224285060e-05   2.2309886868150108e-04   9.9146665943773923e-05   1.9771920513327911e-04   5.7026118300064759e-04   5.1253184716229744e-04   1.7369151982942171e-04   1.3505355450245792e-04   5.2768296146043825e-05   1.6808734342596381e-04   2.9129023205833353e-04   7.7108446409473346e-05   1.2379299379726601e-04   2.3272253592448576e-04";
          @file[2]="3.1367255682324721e-04   1.8484920998652980e-04  -8.7969140406995196e-03   4.9008724216063752e-04   1.4621693137982397e-04   4.4684613283538504e-04   1.3265752452686170e-04   4.4747670918528052e-04   8.9354780763245892e-04   2.1131116662969563e-04   7.7971691686037220e-04   2.1768184413628041e-04   1.9272682064670264e-04   5.3547125266932745e-04   1.0262924717798900e-04   1.7840791632455525e-03   1.1267696497535547e-03   4.5720560771351842e-05   6.8066804013990252e-04   6.4785264138558964e-05";
          @file[3]="2.1010434252149353e-04   1.8653908482691093e-05   7.7510251774341960e-04  -5.4334777903404059e-03   5.5569798112030254e-06   3.0667726601164310e-04   1.3394636151299636e-03   4.4579531656978359e-04   1.3576894825529851e-04   1.6829482449732665e-04   4.1099989140567361e-04   2.0212152429866764e-04   4.5428121673966895e-05   2.5507431469609459e-04   1.0205518285899909e-04   2.0445501822852308e-04   2.6693700299846776e-04   4.0878617408964412e-05   1.1795672329283273e-04   3.8215367445538551e-04";
          @file[4]="2.1136605973015353e-03   4.9097306198338062e-05   1.2350899885492703e-04   2.9679323991665393e-06  -1.0014103934406528e-02   6.2799499774218395e-05   1.8078039707311043e-05   2.0498775017754580e-04  -3.1722875091894061e-05  -6.1271016671683094e-05   1.5371928694983849e-03   7.3025982878872556e-06   3.5714110338087206e-04   1.3618534341337041e-03  -5.4893392350233084e-05   1.8007678910144926e-03   8.5888279169351201e-04   1.0755819201295429e-04   3.7430879503863314e-04   1.1818834190468531e-03";
          @file[5]="4.4513142205973284e-04   4.7728034320859458e-04   8.1677612805156606e-04   3.5443847957083644e-04   1.3589399951141756e-04  -1.1270318861323694e-02   4.7893183805095354e-04   6.4691860783173320e-04   5.4444355445641018e-04   4.9986319078729462e-04   9.2135410336168367e-04   6.1704687397169818e-04   1.0763045324688010e-03   7.5468879301851598e-04   1.5603169738569837e-04   1.1289256148172861e-03   4.3825966293029744e-04   6.1318477843191432e-04   4.5802811408948929e-04   7.0681712731976193e-04";
          @file[6]="2.0075339734074079e-04   6.4214271527187309e-05   2.9002576440677108e-04   1.8516114679737721e-03   4.6790220418926293e-05   5.7284004159035521e-04  -6.7145542907941277e-03   3.7278443019373694e-04   2.9429154131570793e-04   1.6115354031959750e-04   3.5762487383611563e-04   9.7904683742185554e-05   2.1059477637378306e-04   2.7442547664733934e-04   1.8515946272712580e-04   6.0848710201174975e-04   2.5370829246856678e-04   7.5312234392248950e-05   2.6651269577498727e-04   5.3036001773322831e-04";
          @file[7]="1.7718772467956096e-03   8.2643580920278313e-05   1.7354314112750854e-04   1.0931676458493738e-04   9.4116114864121556e-05   1.3725925244429884e-04   6.6128716312628165e-05  -6.6292759246982117e-03   2.3153899117151900e-05   2.9362495124355450e-04   6.5061701396378416e-04   1.1896308589052552e-04   2.6261673165775719e-04   4.8069573317555120e-04   1.2932006636622603e-04   1.2295464806574841e-03   4.2778365072112607e-04   4.1864041196790639e-05   1.2362613623180172e-04   4.1257931742707784e-04";
          @file[8]="6.9486570208355115e-04   1.9374531968829599e-04   1.8280840468076918e-03   1.7562772205501802e-04  -7.6833385543674976e-05   6.0937718939158144e-04   2.7539208453396420e-04   1.2214212837029711e-04  -8.9471701769991193e-03   3.3106217221668153e-04   5.7600169387889871e-04   8.4012799144242434e-05   7.1817805065970696e-05   7.2256976272790942e-04   4.2878958105399270e-05   5.9023221469851721e-04   3.8273918188042982e-04   2.0582664890113006e-04   1.8543160705503186e-03   2.6331206244289480e-04";
          @file[9]="3.8134235114129785e-04   3.7236242876561643e-05   4.1664359114431341e-05   2.0981052390915751e-05  -1.4301987976416992e-05   5.3919813683509510e-05   1.4533741036785394e-05   1.4927882136608745e-04   3.1906080257843370e-05  -1.2473366446095816e-02   3.6558324094839250e-03   5.3695133070134969e-05   1.3820498842004147e-03   6.1885507130062618e-04   7.2756020492037435e-05   2.2411261952826376e-04   4.4384534107534814e-04   4.3459645334184038e-05   9.0396099614313414e-05   5.1718037481055662e-03";
          @file[10]="6.9150831787507985e-04   7.7072101509605026e-05   1.1032796475880150e-04   3.6770929370685812e-05   2.5749931316470712e-04   7.1323096833837262e-05   2.3145772291421748e-05   2.3737613136368967e-04   3.9837680604569609e-05   2.6235700857400492e-03  -9.6048198171406387e-03   3.9979498071365602e-05   1.2289115596033607e-03   1.3185244913414189e-03   6.8625632584967794e-05   2.0995209696962760e-04   5.2167421429141607e-04   1.0017211665518794e-04   1.0891384730724411e-04   1.8396349668036173e-03";
          @file[11]="5.7001837488787090e-04   1.2405600391542002e-03   5.5162558229989247e-04   3.2385380597854560e-04   2.1907794863660767e-05   8.5545134800621848e-04   1.1348042888298741e-04   7.7731561803466337e-04   1.0406130803093558e-04   6.9010449434452840e-04   7.1599646545990401e-04  -9.0672245249334496e-03   1.6871719763990030e-04   2.8489018712928195e-04   4.3040798205096637e-04   7.0753583768264690e-04   7.7195265464736552e-04   9.4286042416641215e-05   6.3611908250068357e-04   8.9402809225545506e-06";
          @file[12]="6.0470464961173188e-04   9.0015313196271975e-05   1.0456954015623857e-04   1.5584830063330057e-05   2.2940450436143727e-04   3.1948699017321784e-04   5.2264397056268425e-05   3.6740783626085531e-04   1.9046571173216664e-05   3.8031591703909305e-03   4.7123226713744427e-03   3.6124363484943413e-05  -1.4867331413521090e-02   1.0195847784420446e-03   4.7531501052228655e-05   1.8742629589557354e-04   1.5575702212466741e-03   7.8637189995369683e-05   7.1424760683834254e-05   1.5510658289024639e-03";
          @file[13]="5.0587586159203299e-04   3.2069573142725094e-05   1.3312161576952011e-04   4.0095293614434213e-05   4.0081305084872115e-04   1.0264440663128169e-04   3.1205572595351325e-05   3.0813829049714810e-04   8.7803906507627073e-05   7.8029552468339913e-04   2.3166049034047654e-03   2.7949093051701906e-05   4.6716760751358029e-04  -8.7436734486614851e-03   5.3272261310981575e-05   4.0768048045371213e-04   4.4505473222745381e-04   3.5884303742992891e-04   1.4153045401544744e-03   8.2973369723264492e-04";
          @file[14]="4.1997549105644058e-04   3.4797668975566138e-05   7.0855486441769730e-05   4.4550404901296213e-05  -4.4866425945702978e-05   5.8934573006359621e-05   5.8471409282250021e-05   2.3021374043523195e-04   1.4469988958167999e-05   2.5475869714086197e-04   3.3484209583253772e-04   1.1726285579097609e-04   6.0481259852833931e-05   1.4794185261904295e-04  -2.8124285445275681e-03   2.5919131387199576e-04   3.0773051743525917e-04   4.8276226640400379e-05   7.9894034978475578e-05   3.1464735325380136e-04";
          @file[15]="3.0471835885184126e-03   5.4744043042400634e-05   6.0833280336966588e-04   4.4079751636421922e-05   7.2691547894163208e-04   2.1059468655612953e-04   9.4901658111921951e-05   1.0810232819236296e-03   9.8372035783084272e-05   3.8757090624842852e-04   5.0593960982282609e-04   9.5203598954240144e-05   1.1778625017290294e-04   5.5915809016357564e-04   1.2801038896124555e-04  -1.0230799563961217e-02   1.9179837742726829e-03   4.9192989685542068e-05   1.9217398940855752e-04   3.1163263838790791e-04";
          @file[16]="2.3384310902916329e-03   1.1662560042937130e-04   4.7231133814857544e-04   7.0748341020269621e-05   4.2621251317121524e-04   1.0050315578476902e-04   4.8643319232695876e-05   4.6236014880572706e-04   7.8418366212341695e-05   9.4358849766206529e-04   1.5454108303069045e-03   1.2769141655821008e-04   1.2033108288202648e-03   7.5040243384967380e-04   1.8683638558569267e-04   2.3578221585983769e-03  -1.3735300070870269e-02  -2.0786064605036118e-05   1.6295905775611056e-04   2.3638106532413994e-03";
          @file[17]="2.9194767777231562e-04   8.7829406872823779e-05   5.4522379957281069e-05   3.0822914730823717e-05   1.5184685931240720e-04   4.0004568432456503e-04   4.1079400577590383e-05   1.2872632988318475e-04   1.1997382208675487e-04   2.6284951268961028e-04   8.4423131469827533e-04   4.4369902313713671e-05   1.7283361009678091e-04   1.7212952116291173e-03   8.3386209651601856e-05   1.7204393184140878e-04  -5.9134686469928136e-05  -5.5174442929341845e-03   6.2782142860551900e-04   3.4095338236033823e-04";
          @file[18]="1.3453102254686679e-04   5.6101931231527800e-05   3.2295526159829325e-04   3.5387016987851892e-05   2.1025004657488982e-04   1.1889240408280282e-04   5.7838925466063096e-05   1.5124474113465081e-04   4.3004351423401048e-04   2.1752763545487339e-04   3.6520898586429569e-04   1.1910314736183012e-04   6.2458673704370154e-05   2.7011237713160901e-03   5.4905900634143107e-05   2.6740806185786829e-04   1.8445578452393739e-04   2.4979278116857734e-04  -5.9725668172063134e-03   2.3333721146336696e-04";
          @file[19]="2.0491494671650620e-03   4.5186782271573565e-05   1.3169657158519762e-05   4.9119114036648609e-05   2.8442773256915802e-04   7.8606827286239905e-05   4.9313328904997307e-05   2.1625625115822384e-04   2.6163185785118098e-05   5.3320966628144012e-03   2.6429031063650871e-03   7.1717841493511859e-07   5.8111946734631784e-04   6.7846046163872636e-04   9.2644571650847091e-05   1.8578645898422713e-04   1.1463512010250097e-03   5.8120585689498703e-05   9.9971275649754943e-05  -1.3629563315914379e-02";
        }


	foreach (@file) {
		push @matrix, [ split(" ",$_)];
		}
	return (@matrix);
}

# Subroutine: Einheitsmatrix 20x20 im Array I erstellen
sub einheitsmatrix_laden
{
  my $zeile,$spalte;

  # Nullmatrix 20x20 erstellen
  for ($zeile=0; $zeile<20; $zeile++) {
    for ($spalte=0; $spalte<20; $spalte++) {
      $I[$zeile][$spalte]=0;
    }
  }
	
  # die Diagonaleinträge mit 1 füllen
  for ($zeile=0; $zeile<20; $zeile++) {
    $I[$zeile][$zeile]=1;
  }
}


# Anzahl der Zeilen bestimmen
sub anzahl_zeilen
{
	my $anzahl_zeilen;
	my @matrix;
	
	@matrix=@_;
	$anzahl_zeilen=@matrix;
	return $anzahl_zeilen;
}

# Anzahl der Spalten bestimmen
sub anzahl_spalten
{
	my $anzahl_spalten;
	my @matrix;
	@matrix=@{$_[0]};
	$anzahl_spalten=@matrix;
	return $anzahl_spalten;
}

sub min_matrix
{
  my ($row,$n_row,$col,$n_col,@A);

  ($A)=@_;

  $n_row   = scalar @{${$A}[0]};
  $n_col   = scalar @{$A};

  $min=$A[0,0];
  for ($row=0; $row<$n_row; $row++) {
		for ($col=0; $col<$n_col; $col++) {
                  if ($A[$col,$row]<$min)
                    { $min=$A[$col,$row];} }}
  return $min;
}

sub matrix_ausgeben
{
	my @matrix;
	my ($zeile, $spalte, $anzahl_zeilen, $anzahl_spalten);
	@matrix=@_;
	$anzahl_zeilen=anzahl_zeilen(@matrix);
	$anzahl_spalten=anzahl_spalten(@matrix);

        if ($fname ne "STDOUT")
          {
            open (FH, ">$fname")|| die print"No way to open file";
            printf(" ... Writing scores to file \"%s\" ...\n\n",$fname);
            $ofh = select(FH);      # Defaulthandle ändern
            $| = 1;                 # Pufferung auf FH aus!
          }
        printf("#\n#  %s%d \n#\n", uc($family),$pam);
        printf("# This matrix was produced by scripts written by\n# Kai Kneutgen and Tobias Mueller [Mai-2002]\n#\n");
        printf("# %s%d  substitution matrix, Units = %s \n#\n",uc($family),$pam,$ustring);
	printf("# Expected Score = %5.3f %s\n",$E,$ustring);
	printf("# Lowest Score   = %5.3f\n# Highest Score  = %5.3f\n",$mins,$maxs);
	printf("# Entropy H      = %5.3f Bits\n#\n#\n",$H);
        printf("# For further information on the %s substitution model, see \n#\n",uc($family));
        if ($family eq "vt")
          { print ("#    Modeling Amino Acid Replacement\n#    T. Mueller and M. Vingron\n#    Journal of Computational Biology, 7(6):761-776, 2000.  \n#\n");}
        elsif ($family eq "vtml")
          { print ("#    Estimating Amino Acid Substitution Models:\n#    A Comparison of Dayhoff's Estimator, the Resolvent Approach and a Maximum Likelihood Method.\n#    T. Mueller, R. Spang and M. Vingron\n#    Mol Biol Evol 19(1): 8-13. 2002. \n");}
        elsif ($family eq "slim")
          { print ("#    Non-symmetric Score Matrices and the Detection of Homologous Transmembrane Proteins\n#    Tobias Mueller, Sven Rahmann and Marc Rehmsmeier.\n#    In: Soeren Brunak et al. (eds),\n#    Proceedings of the 9th International Conference on Intelligent Systems for Molecular Biology (ISMB 2001)\n#    Bioinformatics 17 Supplement 1, pp. S182-189. \n");}
        else 
          {die print "Unknown score family!\n";}
        printf("#\n# or mail to\n#    Tobias.Mueller\@molgen.mpg.de\n");
        printf("#\n# The latest version of this perl script can be downloaded at \n");
        printf("#    http://www.molgen.mpg.de/~muelle_t\n");

	for ($zeile=0; $zeile<$anzahl_zeilen; $zeile++) {
          for ($spalte=0; $spalte<$anzahl_spalten; $spalte++) {
            # printf "%4s", $matrix[$zeile][$spalte];
            printf "%s ", $matrix[$zeile][$spalte];
          }
          print ("\n");
	}

        if ($fname ne "STDOUT")
          {
            close FH;
            select($ofh);   # Alter Defaulthandle, Pufferung von FH aus!
        }
}

# Addition zweier Matrizen
# ACHTUNG: der Subroutine müssen zwei Referenzen \@matrix1, \@matrix2 
# auf die entsprechenden Matrizen übergeben werden
sub summe
{
	my @matrix;
	my @matrix1;
	my @matrix2;
	my ($zeile, $spalte, $anzahl_zeilen1, $anzahl_spalten1, $anzahl_zeilen2, $anzahl_spalten2);
	@matrix1=@{$_[0]};
	@matrix2=@{$_[1]};
	$anzahl_zeilen1=anzahl_zeilen(@matrix1);
	$anzahl_spalten1=anzahl_spalten(@matrix1);
	$anzahl_zeilen2=anzahl_zeilen(@matrix2);
	$anzahl_spalten2=anzahl_spalten(@matrix2);
	if ($anzahl_zeilen1==$anzahl_zeilen2 &&	$anzahl_spalten1==$anzahl_spalten2) {
		for ($zeile=0; $zeile<$anzahl_zeilen1; $zeile++) {
			for ($spalte=0; $spalte<$anzahl_spalten1; $spalte++) {
				$matrix[$zeile][$spalte]=$matrix1[$zeile][$spalte]+$matrix2[$zeile][$spalte];
			}
		}
	}
	else
          {
		die "The number of columns and rows of both matrices must coincide!\n";
          }
	return @matrix;
}
# Skalarmultiplikation eines Skalars mit einer Matrix
# ACHTUNG: der Subroutine muss ein Skalar $skalar und eine Referenz \@matrix1 auf die entsprechenden Matrizen übergeben werden
sub skalarmultiplikation
{
	my @matrix;
	my @matrix1;
	my ($skalar, $zeile, $spalte, $anzahl_zeilen, $anzahl_spalten);
	$skalar=$_[0];
	@matrix1=@{$_[1]};
	
	$anzahl_zeilen=anzahl_zeilen(@matrix1);
	$anzahl_spalten=anzahl_spalten(@matrix1);
	
	for ($zeile=0; $zeile<$anzahl_zeilen; $zeile++) {
		for ($spalte=0; $spalte<$anzahl_spalten; $spalte++) {
			$matrix[$zeile][$spalte]=$skalar*$matrix1[$zeile][$spalte];
		}
	}
	return @matrix;
}

# Multiplikation zweier Matrizen
# ACHTUNG: der Subroutine müssen zwei Referenzen \@matrix1, \@matrix2 
# auf die entsprechenden Matrizen übergeben werden
sub multiplikation
{
	my @matrix;
	my @matrix1;
	my @matrix2;
	my ($zeile, $spalte, $anzahl_zeilen1, $anzahl_spalten1, $anzahl_zeilen2, $anzahl_spalten2);
	my $k, $element;
	@matrix1=@{$_[0]};
	@matrix2=@{$_[1]};
	$anzahl_zeilen1=anzahl_zeilen(@matrix1);
	$anzahl_spalten1=anzahl_spalten(@matrix1);
	$anzahl_zeilen2=anzahl_zeilen(@matrix2);
	$anzahl_spalten2=anzahl_spalten(@matrix2);
	if ($anzahl_spalten1==$anzahl_zeilen2) {
		for ($zeile=0; $zeile<$anzahl_zeilen1; $zeile++) {
			for ($spalte=0; $spalte<$anzahl_spalten2; $spalte++) {
				$element=0;
				for ($k=0; $k<$anzahl_spalten1; $k++) {
					$element=$element+$matrix1[$zeile][$k]*$matrix2[$k][$spalte];
				}
				$matrix[$zeile][$spalte]=$element;
			}
		}
	}
	else {
		die "Assumption: #Sp(Matrix1)=#Z(Matrix2) !\n";
	}
	return @matrix;
}

# subroutine zur Aufsummierung der Einträge einer Zeile einer Matrix
# erwartet als Übergabe die Referenz auf die Matrix und die Zeile
sub zeilensumme
{
	my @matrix;
	my ($zeile, $anzahl_spalten, $spalte, $zeilensumme);
	@matrix=@{$_[0]};
	$zeile=$_[1];
	$anzahl_spalten=anzahl_spalten(@matrix);
	$zeilensumme=0;
	for ($spalte=0; $spalte<$anzahl_spalten; $spalte++) {
		$zeilensumme=$zeilensumme+$matrix[$zeile][$spalte];
	}
	return $zeilensumme;
}

# subroutine zur Aufsummierung der Einträge einer Spalte einer Matrix
# erwartet als Übergabe die Referenz auf die Matrix und die Spalte
sub spaltensumme
{
	my @matrix;
	my ($zeile, $anzahl_zeilen, $spalte, $spaltensumme);
	@matrix=@{$_[0]};
	$spalte=$_[1];
	$anzahl_zeilen=anzahl_zeilen(@matrix);
	$spaltensumme=0;
	for ($zeile=0; $zeile<$anzahl_zeilen; $zeile++) {
		$spaltensumme=$spaltensumme+$matrix[$zeile][$spalte];
	}
	return $spaltensumme;
}
	
sub uebergangsmatrix
{
	my (@Q, @matrix1, @M_alt, @M_neu);
	my ($t, $k, $n, $i);
	
	@Q=@{$_[0]};
	$t=$_[1];
	$k=$_[2];
	$n=2**$k;
	
	# M berechnen (s. Dissertation S.91; Näherung für P(t)=exp(tQ)        )
	@matrix1=skalarmultiplikation($t/$n,\@Q);
	@M_alt=summe(\@I,\@matrix1);
	
	for ($i=0; $i<$k; $i++) {
		@M_neu=multiplikation(\@M_alt,\@M_alt);
		@M_alt=@M_neu;
	}
	return @M_neu;
}


sub scorematrix
{
	my (@score, @P, @tau, @pi);
	my ($i, $j, $model1, $model2, $factor);
	
	@P=@{$_[0]};
	@tau=@{$_[1]};
	@pi=@{$_[2]};
	$rfactor=$_[3];
	for ($i=0; $i<20; $i++) {
		for ($j=0; $j<20; $j++) {
			$model1=$tau[$i]*$P[$i][$j];
			if ($model1==0) {
                          die "\nWarning: log (0) !\n";
			}
			$model2=$tau[$i]*$pi[$j];
			$score[$i][$j]=$rfactor*log($model1/$model2);
		}
	}
	return @score;
}

sub score2blast
{
	my (@score, @blast);
	my ($i, $j, $xi, $xj, $xx, $min);
	@score=@{$_[0]};
	$blast[0][21]="B";
	$blast[0][22]="Z";
	$blast[0][23]="X";
	$blast[0][24]="*";
	$blast[21][0]="B";
	$blast[22][0]="Z";
	$blast[23][0]="X";
	$blast[24][0]="*";
	
	
	$xx=0;
	$min=0;
	for ($i=0; $i<20; $i++) {
		$blast[$i+1][0]=$menge_aminos[$i];
		$blast[0][$i+1]=$menge_aminos[$i];
		$xi=0;
		$xj=0;
		for ($j=0; $j<20; $j++) {
			$blast[$i+1][$j+1]=$score[$i][$j];
			$xi=$xi+$score[$i][$j];
			$xj=$xj+$score[$j][$i];
			if ($score[$i][$j]<$min) {
				$min=$score[$i][$j];
			}
			
		}
		$xx=$xx+$xi;
		
		# score (A, R, ..., V) mit B / Z / X
		$blast[$i+1][21]=($score[$i][2]+$score[$i][3])/2;
		$blast[$i+1][22]=($score[$i][5]+$score[$i][6])/2;
		$blast[$i+1][23]=$xi/20;
		# $blast[$i+1][24]="*";

		# score B / Z / X mit(A, R, ..., V)
		$blast[21][$i+1]=($score[2][$i]+$score[3][$i])/2;
		$blast[22][$i+1]=($score[5][$i]+$score[6][$i])/2;
		$blast[23][$i+1]=$xj/20;
		# $blast[24][$i+1]="*";

	}
	
	# score B mit B
	$blast[21][21]=($blast[3][21]+$blast[4][21])/2;
	# score B mit Z
	$blast[21][22]=($blast[3][22]+$blast[4][22])/2;
	# score B mit X
	$blast[21][23]=($blast[3][23]+$blast[4][23])/2;
	
	# score Z mit B
	$blast[22][21]=($blast[6][21]+$blast[7][21])/2;
	# score Z mit Z
	$blast[22][22]=($blast[6][22]+$blast[7][22])/2;
	# score Z mit X
	$blast[22][23]=($blast[6][23]+$blast[7][23])/2;
	
	# score X mit B
	$blast[23][21]=($blast[23][3]+$blast[23][4])/2;
	# score X mit Z
	$blast[23][22]=($blast[23][6]+$blast[23][7])/2;
	# score X mit X
	$blast[23][23]=$xx/400;
		
	# Minimum
	for ($i=1; $i<25; $i++) {
		$blast[$i][24]=$min,0;
		$blast[24][$i]=$min,0;
	}
	$blast[24][24]=1;
	
	# runden
	for ($i=1; $i<25; $i++) {
		for ($j=1; $j<25; $j++) {
			$blast[$i][$j]=runden($blast[$i][$j],0);
		}
	}
	return @blast;
}
